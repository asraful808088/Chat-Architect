"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-ace";
exports.ids = ["vendor-chunks/react-ace"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-ace/lib/ace.js":
/*!*******************************************!*\
  !*** ./node_modules/react-ace/lib/ace.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar ace_builds_1 = __webpack_require__(/*! ace-builds */ \"(ssr)/./node_modules/ace-builds/src-noconflict/ace.js\");\nvar PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar isEqual = __webpack_require__(/*! lodash.isequal */ \"(ssr)/./node_modules/lodash.isequal/index.js\");\nvar editorOptions_1 = __webpack_require__(/*! ./editorOptions */ \"(ssr)/./node_modules/react-ace/lib/editorOptions.js\");\nvar ace = (0, editorOptions_1.getAceInstance)();\nvar ReactAce = /** @class */ function(_super) {\n    __extends(ReactAce, _super);\n    function ReactAce(props) {\n        var _this = _super.call(this, props) || this;\n        editorOptions_1.editorEvents.forEach(function(method) {\n            _this[method] = _this[method].bind(_this);\n        });\n        _this.debounce = editorOptions_1.debounce;\n        return _this;\n    }\n    ReactAce.prototype.isInShadow = function(node) {\n        var parent = node && node.parentNode;\n        while(parent){\n            if (parent.toString() === \"[object ShadowRoot]\") {\n                return true;\n            }\n            parent = parent.parentNode;\n        }\n        return false;\n    };\n    ReactAce.prototype.componentDidMount = function() {\n        var _this = this;\n        var _a = this.props, className = _a.className, onBeforeLoad = _a.onBeforeLoad, onValidate = _a.onValidate, mode = _a.mode, focus = _a.focus, theme = _a.theme, fontSize = _a.fontSize, value = _a.value, defaultValue = _a.defaultValue, showGutter = _a.showGutter, wrapEnabled = _a.wrapEnabled, showPrintMargin = _a.showPrintMargin, _b = _a.scrollMargin, scrollMargin = _b === void 0 ? [\n            0,\n            0,\n            0,\n            0\n        ] : _b, keyboardHandler = _a.keyboardHandler, onLoad = _a.onLoad, commands = _a.commands, annotations = _a.annotations, markers = _a.markers, placeholder = _a.placeholder;\n        this.editor = ace.edit(this.refEditor);\n        if (onBeforeLoad) {\n            onBeforeLoad(ace);\n        }\n        var editorProps = Object.keys(this.props.editorProps);\n        for(var i = 0; i < editorProps.length; i++){\n            this.editor[editorProps[i]] = this.props.editorProps[editorProps[i]];\n        }\n        if (this.props.debounceChangePeriod) {\n            this.onChange = this.debounce(this.onChange, this.props.debounceChangePeriod);\n        }\n        this.editor.renderer.setScrollMargin(scrollMargin[0], scrollMargin[1], scrollMargin[2], scrollMargin[3]);\n        if (this.isInShadow(this.refEditor)) {\n            this.editor.renderer.attachToShadowRoot();\n        }\n        this.editor.getSession().setMode(typeof mode === \"string\" ? \"ace/mode/\".concat(mode) : mode);\n        if (theme && theme !== \"\") this.editor.setTheme(\"ace/theme/\".concat(theme));\n        this.editor.setFontSize(typeof fontSize === \"number\" ? \"\".concat(fontSize, \"px\") : fontSize);\n        this.editor.getSession().setValue(!defaultValue ? value || \"\" : defaultValue);\n        if (this.props.navigateToFileEnd) {\n            this.editor.navigateFileEnd();\n        }\n        this.editor.renderer.setShowGutter(showGutter);\n        this.editor.getSession().setUseWrapMode(wrapEnabled);\n        this.editor.setShowPrintMargin(showPrintMargin);\n        this.editor.on(\"focus\", this.onFocus);\n        this.editor.on(\"blur\", this.onBlur);\n        this.editor.on(\"copy\", this.onCopy);\n        this.editor.on(\"paste\", this.onPaste);\n        this.editor.on(\"change\", this.onChange);\n        this.editor.on(\"input\", this.onInput);\n        if (placeholder) {\n            this.updatePlaceholder();\n        }\n        this.editor.getSession().selection.on(\"changeSelection\", this.onSelectionChange);\n        this.editor.getSession().selection.on(\"changeCursor\", this.onCursorChange);\n        if (onValidate) {\n            // @ts-ignore types don't include\n            this.editor.getSession().on(\"changeAnnotation\", function() {\n                // tslint:disable-next-line:no-shadowed-variable\n                var annotations = _this.editor.getSession().getAnnotations();\n                _this.props.onValidate(annotations);\n            });\n        }\n        this.editor.session.on(\"changeScrollTop\", this.onScroll);\n        this.editor.getSession().setAnnotations(annotations || []);\n        if (markers && markers.length > 0) {\n            this.handleMarkers(markers);\n        }\n        // get a list of possible options to avoid 'misspelled option errors'\n        var availableOptions = this.editor.$options;\n        editorOptions_1.editorOptions.forEach(function(option) {\n            if (availableOptions.hasOwnProperty(option)) {\n                // @ts-ignore\n                _this.editor.setOption(option, _this.props[option]);\n            } else if (_this.props[option]) {\n                console.warn(\"ReactAce: editor option \".concat(option, \" was activated but not found. Did you need to import a related tool or did you possibly mispell the option?\"));\n            }\n        });\n        this.handleOptions(this.props);\n        if (Array.isArray(commands)) {\n            commands.forEach(function(command) {\n                if (typeof command.exec === \"string\") {\n                    _this.editor.commands.bindKey(command.bindKey, command.exec);\n                } else {\n                    _this.editor.commands.addCommand(command);\n                }\n            });\n        }\n        if (keyboardHandler) {\n            this.editor.setKeyboardHandler(\"ace/keyboard/\" + keyboardHandler);\n        }\n        if (className) {\n            this.refEditor.className += \" \" + className;\n        }\n        if (onLoad) {\n            onLoad(this.editor);\n        }\n        this.editor.resize();\n        if (focus) {\n            this.editor.focus();\n        }\n    };\n    ReactAce.prototype.componentDidUpdate = function(prevProps) {\n        var oldProps = prevProps;\n        var nextProps = this.props;\n        for(var i = 0; i < editorOptions_1.editorOptions.length; i++){\n            var option = editorOptions_1.editorOptions[i];\n            if (nextProps[option] !== oldProps[option]) {\n                // @ts-ignore\n                this.editor.setOption(option, nextProps[option]);\n            }\n        }\n        if (nextProps.className !== oldProps.className) {\n            var appliedClasses = this.refEditor.className;\n            var appliedClassesArray_1 = appliedClasses.trim().split(\" \");\n            var oldClassesArray = oldProps.className.trim().split(\" \");\n            oldClassesArray.forEach(function(oldClass) {\n                var index = appliedClassesArray_1.indexOf(oldClass);\n                appliedClassesArray_1.splice(index, 1);\n            });\n            this.refEditor.className = \" \" + nextProps.className + \" \" + appliedClassesArray_1.join(\" \");\n        }\n        // First process editor value, as it may create a new session (see issue #300)\n        var valueChanged = this.editor && nextProps.value != null && this.editor.getValue() !== nextProps.value;\n        if (valueChanged) {\n            // editor.setValue is a synchronous function call, change event is emitted before setValue return.\n            this.silent = true;\n            var pos = this.editor.session.selection.toJSON();\n            this.editor.setValue(nextProps.value, nextProps.cursorStart);\n            this.editor.session.selection.fromJSON(pos);\n            this.silent = false;\n        }\n        if (nextProps.placeholder !== oldProps.placeholder) {\n            this.updatePlaceholder();\n        }\n        if (nextProps.mode !== oldProps.mode) {\n            this.editor.getSession().setMode(typeof nextProps.mode === \"string\" ? \"ace/mode/\".concat(nextProps.mode) : nextProps.mode);\n        }\n        if (nextProps.theme !== oldProps.theme) {\n            this.editor.setTheme(\"ace/theme/\" + nextProps.theme);\n        }\n        if (nextProps.keyboardHandler !== oldProps.keyboardHandler) {\n            if (nextProps.keyboardHandler) {\n                this.editor.setKeyboardHandler(\"ace/keyboard/\" + nextProps.keyboardHandler);\n            } else {\n                this.editor.setKeyboardHandler(null);\n            }\n        }\n        if (nextProps.fontSize !== oldProps.fontSize) {\n            this.editor.setFontSize(typeof nextProps.fontSize === \"number\" ? \"\".concat(nextProps.fontSize, \"px\") : nextProps.fontSize);\n        }\n        if (nextProps.wrapEnabled !== oldProps.wrapEnabled) {\n            this.editor.getSession().setUseWrapMode(nextProps.wrapEnabled);\n        }\n        if (nextProps.showPrintMargin !== oldProps.showPrintMargin) {\n            this.editor.setShowPrintMargin(nextProps.showPrintMargin);\n        }\n        if (nextProps.showGutter !== oldProps.showGutter) {\n            this.editor.renderer.setShowGutter(nextProps.showGutter);\n        }\n        if (!isEqual(nextProps.setOptions, oldProps.setOptions)) {\n            this.handleOptions(nextProps);\n        }\n        // if the value or annotations changed, set the annotations\n        // changing the value may create create a new session which will require annotations to be re-set\n        if (valueChanged || !isEqual(nextProps.annotations, oldProps.annotations)) {\n            this.editor.getSession().setAnnotations(nextProps.annotations || []);\n        }\n        if (!isEqual(nextProps.markers, oldProps.markers) && Array.isArray(nextProps.markers)) {\n            this.handleMarkers(nextProps.markers);\n        }\n        // this doesn't look like it works at all....\n        if (!isEqual(nextProps.scrollMargin, oldProps.scrollMargin)) {\n            this.handleScrollMargins(nextProps.scrollMargin);\n        }\n        if (prevProps.height !== this.props.height || prevProps.width !== this.props.width) {\n            this.editor.resize();\n        }\n        if (this.props.focus && !prevProps.focus) {\n            this.editor.focus();\n        }\n    };\n    ReactAce.prototype.handleScrollMargins = function(margins) {\n        if (margins === void 0) {\n            margins = [\n                0,\n                0,\n                0,\n                0\n            ];\n        }\n        this.editor.renderer.setScrollMargin(margins[0], margins[1], margins[2], margins[3]);\n    };\n    ReactAce.prototype.componentWillUnmount = function() {\n        if (this.editor) {\n            this.editor.destroy();\n            this.editor = null;\n        }\n    };\n    ReactAce.prototype.onChange = function(event) {\n        if (this.props.onChange && !this.silent) {\n            var value = this.editor.getValue();\n            this.props.onChange(value, event);\n        }\n    };\n    ReactAce.prototype.onSelectionChange = function(event) {\n        if (this.props.onSelectionChange) {\n            var value = this.editor.getSelection();\n            this.props.onSelectionChange(value, event);\n        }\n    };\n    ReactAce.prototype.onCursorChange = function(event) {\n        if (this.props.onCursorChange) {\n            var value = this.editor.getSelection();\n            this.props.onCursorChange(value, event);\n        }\n    };\n    ReactAce.prototype.onInput = function(event) {\n        if (this.props.onInput) {\n            this.props.onInput(event);\n        }\n        if (this.props.placeholder) {\n            this.updatePlaceholder();\n        }\n    };\n    ReactAce.prototype.onFocus = function(event) {\n        if (this.props.onFocus) {\n            this.props.onFocus(event, this.editor);\n        }\n    };\n    ReactAce.prototype.onBlur = function(event) {\n        if (this.props.onBlur) {\n            this.props.onBlur(event, this.editor);\n        }\n    };\n    ReactAce.prototype.onCopy = function(_a) {\n        var text = _a.text;\n        if (this.props.onCopy) {\n            this.props.onCopy(text);\n        }\n    };\n    ReactAce.prototype.onPaste = function(_a) {\n        var text = _a.text;\n        if (this.props.onPaste) {\n            this.props.onPaste(text);\n        }\n    };\n    ReactAce.prototype.onScroll = function() {\n        if (this.props.onScroll) {\n            this.props.onScroll(this.editor);\n        }\n    };\n    ReactAce.prototype.handleOptions = function(props) {\n        var setOptions = Object.keys(props.setOptions);\n        for(var y = 0; y < setOptions.length; y++){\n            // @ts-ignore\n            this.editor.setOption(setOptions[y], props.setOptions[setOptions[y]]);\n        }\n    };\n    ReactAce.prototype.handleMarkers = function(markers) {\n        var _this = this;\n        // remove foreground markers\n        var currentMarkers = this.editor.getSession().getMarkers(true);\n        for(var i in currentMarkers){\n            if (currentMarkers.hasOwnProperty(i)) {\n                this.editor.getSession().removeMarker(currentMarkers[i].id);\n            }\n        }\n        // remove background markers except active line marker and selected word marker\n        currentMarkers = this.editor.getSession().getMarkers(false);\n        for(var i in currentMarkers){\n            if (currentMarkers.hasOwnProperty(i) && currentMarkers[i].clazz !== \"ace_active-line\" && currentMarkers[i].clazz !== \"ace_selected-word\") {\n                this.editor.getSession().removeMarker(currentMarkers[i].id);\n            }\n        }\n        // add new markers\n        markers.forEach(function(_a) {\n            var startRow = _a.startRow, startCol = _a.startCol, endRow = _a.endRow, endCol = _a.endCol, className = _a.className, type = _a.type, _b = _a.inFront, inFront = _b === void 0 ? false : _b;\n            var range = new ace_builds_1.Range(startRow, startCol, endRow, endCol);\n            _this.editor.getSession().addMarker(range, className, type, inFront);\n        });\n    };\n    ReactAce.prototype.updatePlaceholder = function() {\n        // Adapted from https://stackoverflow.com/questions/26695708/how-can-i-add-placeholder-text-when-the-editor-is-empty\n        var editor = this.editor;\n        var placeholder = this.props.placeholder;\n        var showPlaceholder = !editor.session.getValue().length;\n        var node = editor.renderer.placeholderNode;\n        if (!showPlaceholder && node) {\n            editor.renderer.scroller.removeChild(editor.renderer.placeholderNode);\n            editor.renderer.placeholderNode = null;\n        } else if (showPlaceholder && !node) {\n            node = editor.renderer.placeholderNode = document.createElement(\"div\");\n            node.textContent = placeholder || \"\";\n            node.className = \"ace_comment ace_placeholder\";\n            node.style.padding = \"0 9px\";\n            node.style.position = \"absolute\";\n            node.style.zIndex = \"3\";\n            editor.renderer.scroller.appendChild(node);\n        } else if (showPlaceholder && node) {\n            node.textContent = placeholder;\n        }\n    };\n    ReactAce.prototype.updateRef = function(item) {\n        this.refEditor = item;\n    };\n    ReactAce.prototype.render = function() {\n        var _a = this.props, name = _a.name, width = _a.width, height = _a.height, style = _a.style;\n        var divStyle = __assign({\n            width: width,\n            height: height\n        }, style);\n        return React.createElement(\"div\", {\n            ref: this.updateRef,\n            id: name,\n            style: divStyle\n        });\n    };\n    ReactAce.propTypes = {\n        mode: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object\n        ]),\n        focus: PropTypes.bool,\n        theme: PropTypes.string,\n        name: PropTypes.string,\n        className: PropTypes.string,\n        height: PropTypes.string,\n        width: PropTypes.string,\n        fontSize: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string\n        ]),\n        showGutter: PropTypes.bool,\n        onChange: PropTypes.func,\n        onCopy: PropTypes.func,\n        onPaste: PropTypes.func,\n        onFocus: PropTypes.func,\n        onInput: PropTypes.func,\n        onBlur: PropTypes.func,\n        onScroll: PropTypes.func,\n        value: PropTypes.string,\n        defaultValue: PropTypes.string,\n        onLoad: PropTypes.func,\n        onSelectionChange: PropTypes.func,\n        onCursorChange: PropTypes.func,\n        onBeforeLoad: PropTypes.func,\n        onValidate: PropTypes.func,\n        minLines: PropTypes.number,\n        maxLines: PropTypes.number,\n        readOnly: PropTypes.bool,\n        highlightActiveLine: PropTypes.bool,\n        tabSize: PropTypes.number,\n        showPrintMargin: PropTypes.bool,\n        cursorStart: PropTypes.number,\n        debounceChangePeriod: PropTypes.number,\n        editorProps: PropTypes.object,\n        setOptions: PropTypes.object,\n        style: PropTypes.object,\n        scrollMargin: PropTypes.array,\n        annotations: PropTypes.array,\n        markers: PropTypes.array,\n        keyboardHandler: PropTypes.string,\n        wrapEnabled: PropTypes.bool,\n        enableSnippets: PropTypes.bool,\n        enableBasicAutocompletion: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.array\n        ]),\n        enableLiveAutocompletion: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.array\n        ]),\n        navigateToFileEnd: PropTypes.bool,\n        commands: PropTypes.array,\n        placeholder: PropTypes.string\n    };\n    ReactAce.defaultProps = {\n        name: \"ace-editor\",\n        focus: false,\n        mode: \"\",\n        theme: \"\",\n        height: \"500px\",\n        width: \"500px\",\n        fontSize: 12,\n        enableSnippets: false,\n        showGutter: true,\n        onChange: null,\n        onPaste: null,\n        onLoad: null,\n        onScroll: null,\n        minLines: null,\n        maxLines: null,\n        readOnly: false,\n        highlightActiveLine: true,\n        showPrintMargin: true,\n        tabSize: 4,\n        cursorStart: 1,\n        editorProps: {},\n        style: {},\n        scrollMargin: [\n            0,\n            0,\n            0,\n            0\n        ],\n        setOptions: {},\n        wrapEnabled: false,\n        enableBasicAutocompletion: false,\n        enableLiveAutocompletion: false,\n        placeholder: null,\n        navigateToFileEnd: true\n    };\n    return ReactAce;\n}(React.Component);\nexports[\"default\"] = ReactAce; //# sourceMappingURL=ace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-ace/lib/ace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-ace/lib/diff.js":
/*!********************************************!*\
  !*** ./node_modules/react-ace/lib/diff.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar split_1 = __webpack_require__(/*! ./split */ \"(ssr)/./node_modules/react-ace/lib/split.js\");\nvar DiffMatchPatch = __webpack_require__(/*! diff-match-patch */ \"(ssr)/./node_modules/diff-match-patch/index.js\");\nvar DiffComponent = /** @class */ function(_super) {\n    __extends(DiffComponent, _super);\n    function DiffComponent(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {\n            value: _this.props.value\n        };\n        _this.onChange = _this.onChange.bind(_this);\n        _this.diff = _this.diff.bind(_this);\n        return _this;\n    }\n    DiffComponent.prototype.componentDidUpdate = function() {\n        var value = this.props.value;\n        if (value !== this.state.value) {\n            this.setState({\n                value: value\n            });\n        }\n    };\n    DiffComponent.prototype.onChange = function(value) {\n        this.setState({\n            value: value\n        });\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    };\n    DiffComponent.prototype.diff = function() {\n        var dmp = new DiffMatchPatch();\n        var lhString = this.state.value[0];\n        var rhString = this.state.value[1];\n        if (lhString.length === 0 && rhString.length === 0) {\n            return [];\n        }\n        var diff = dmp.diff_main(lhString, rhString);\n        dmp.diff_cleanupSemantic(diff);\n        var diffedLines = this.generateDiffedLines(diff);\n        var codeEditorSettings = this.setCodeMarkers(diffedLines);\n        return codeEditorSettings;\n    };\n    DiffComponent.prototype.generateDiffedLines = function(diff) {\n        var C = {\n            DIFF_EQUAL: 0,\n            DIFF_DELETE: -1,\n            DIFF_INSERT: 1\n        };\n        var diffedLines = {\n            left: [],\n            right: []\n        };\n        var cursor = {\n            left: 1,\n            right: 1\n        };\n        diff.forEach(function(chunk) {\n            var chunkType = chunk[0];\n            var text = chunk[1];\n            var lines = text.split(\"\\n\").length - 1;\n            // diff-match-patch sometimes returns empty strings at random\n            if (text.length === 0) {\n                return;\n            }\n            var firstChar = text[0];\n            var lastChar = text[text.length - 1];\n            var linesToHighlight = 0;\n            switch(chunkType){\n                case C.DIFF_EQUAL:\n                    cursor.left += lines;\n                    cursor.right += lines;\n                    break;\n                case C.DIFF_DELETE:\n                    // If the deletion starts with a newline, push the cursor down to that line\n                    if (firstChar === \"\\n\") {\n                        cursor.left++;\n                        lines--;\n                    }\n                    linesToHighlight = lines;\n                    // If the deletion does not include a newline, highlight the same line on the right\n                    if (linesToHighlight === 0) {\n                        diffedLines.right.push({\n                            startLine: cursor.right,\n                            endLine: cursor.right\n                        });\n                    }\n                    // If the last character is a newline, we don't want to highlight that line\n                    if (lastChar === \"\\n\") {\n                        linesToHighlight -= 1;\n                    }\n                    diffedLines.left.push({\n                        startLine: cursor.left,\n                        endLine: cursor.left + linesToHighlight\n                    });\n                    cursor.left += lines;\n                    break;\n                case C.DIFF_INSERT:\n                    // If the insertion starts with a newline, push the cursor down to that line\n                    if (firstChar === \"\\n\") {\n                        cursor.right++;\n                        lines--;\n                    }\n                    linesToHighlight = lines;\n                    // If the insertion does not include a newline, highlight the same line on the left\n                    if (linesToHighlight === 0) {\n                        diffedLines.left.push({\n                            startLine: cursor.left,\n                            endLine: cursor.left\n                        });\n                    }\n                    // If the last character is a newline, we don't want to highlight that line\n                    if (lastChar === \"\\n\") {\n                        linesToHighlight -= 1;\n                    }\n                    diffedLines.right.push({\n                        startLine: cursor.right,\n                        endLine: cursor.right + linesToHighlight\n                    });\n                    cursor.right += lines;\n                    break;\n                default:\n                    throw new Error(\"Diff type was not defined.\");\n            }\n        });\n        return diffedLines;\n    };\n    // Receives a collection of line numbers and iterates through them to highlight appropriately\n    // Returns an object that tells the render() method how to display the code editors\n    DiffComponent.prototype.setCodeMarkers = function(diffedLines) {\n        if (diffedLines === void 0) {\n            diffedLines = {\n                left: [],\n                right: []\n            };\n        }\n        var codeEditorSettings = [];\n        var newMarkerSet = {\n            left: [],\n            right: []\n        };\n        for(var i = 0; i < diffedLines.left.length; i++){\n            var markerObj = {\n                startRow: diffedLines.left[i].startLine - 1,\n                endRow: diffedLines.left[i].endLine,\n                type: \"text\",\n                className: \"codeMarker\"\n            };\n            newMarkerSet.left.push(markerObj);\n        }\n        for(var i = 0; i < diffedLines.right.length; i++){\n            var markerObj = {\n                startRow: diffedLines.right[i].startLine - 1,\n                endRow: diffedLines.right[i].endLine,\n                type: \"text\",\n                className: \"codeMarker\"\n            };\n            newMarkerSet.right.push(markerObj);\n        }\n        codeEditorSettings[0] = newMarkerSet.left;\n        codeEditorSettings[1] = newMarkerSet.right;\n        return codeEditorSettings;\n    };\n    DiffComponent.prototype.render = function() {\n        var markers = this.diff();\n        return React.createElement(split_1.default, {\n            name: this.props.name,\n            className: this.props.className,\n            focus: this.props.focus,\n            orientation: this.props.orientation,\n            splits: this.props.splits,\n            mode: this.props.mode,\n            theme: this.props.theme,\n            height: this.props.height,\n            width: this.props.width,\n            fontSize: this.props.fontSize,\n            showGutter: this.props.showGutter,\n            onChange: this.onChange,\n            onPaste: this.props.onPaste,\n            onLoad: this.props.onLoad,\n            onScroll: this.props.onScroll,\n            minLines: this.props.minLines,\n            maxLines: this.props.maxLines,\n            readOnly: this.props.readOnly,\n            highlightActiveLine: this.props.highlightActiveLine,\n            showPrintMargin: this.props.showPrintMargin,\n            tabSize: this.props.tabSize,\n            cursorStart: this.props.cursorStart,\n            editorProps: this.props.editorProps,\n            style: this.props.style,\n            scrollMargin: this.props.scrollMargin,\n            setOptions: this.props.setOptions,\n            wrapEnabled: this.props.wrapEnabled,\n            enableBasicAutocompletion: this.props.enableBasicAutocompletion,\n            enableLiveAutocompletion: this.props.enableLiveAutocompletion,\n            value: this.state.value,\n            markers: markers\n        });\n    };\n    DiffComponent.propTypes = {\n        cursorStart: PropTypes.number,\n        editorProps: PropTypes.object,\n        enableBasicAutocompletion: PropTypes.bool,\n        enableLiveAutocompletion: PropTypes.bool,\n        focus: PropTypes.bool,\n        fontSize: PropTypes.number,\n        height: PropTypes.string,\n        highlightActiveLine: PropTypes.bool,\n        maxLines: PropTypes.number,\n        minLines: PropTypes.number,\n        mode: PropTypes.string,\n        name: PropTypes.string,\n        className: PropTypes.string,\n        onLoad: PropTypes.func,\n        onPaste: PropTypes.func,\n        onScroll: PropTypes.func,\n        onChange: PropTypes.func,\n        orientation: PropTypes.string,\n        readOnly: PropTypes.bool,\n        scrollMargin: PropTypes.array,\n        setOptions: PropTypes.object,\n        showGutter: PropTypes.bool,\n        showPrintMargin: PropTypes.bool,\n        splits: PropTypes.number,\n        style: PropTypes.object,\n        tabSize: PropTypes.number,\n        theme: PropTypes.string,\n        value: PropTypes.array,\n        width: PropTypes.string,\n        wrapEnabled: PropTypes.bool\n    };\n    DiffComponent.defaultProps = {\n        cursorStart: 1,\n        editorProps: {},\n        enableBasicAutocompletion: false,\n        enableLiveAutocompletion: false,\n        focus: false,\n        fontSize: 12,\n        height: \"500px\",\n        highlightActiveLine: true,\n        maxLines: null,\n        minLines: null,\n        mode: \"\",\n        name: \"ace-editor\",\n        onLoad: null,\n        onScroll: null,\n        onPaste: null,\n        onChange: null,\n        orientation: \"beside\",\n        readOnly: false,\n        scrollMargin: [\n            0,\n            0,\n            0,\n            0\n        ],\n        setOptions: {},\n        showGutter: true,\n        showPrintMargin: true,\n        splits: 2,\n        style: {},\n        tabSize: 4,\n        theme: \"github\",\n        value: [\n            \"\",\n            \"\"\n        ],\n        width: \"500px\",\n        wrapEnabled: true\n    };\n    return DiffComponent;\n}(React.Component);\nexports[\"default\"] = DiffComponent; //# sourceMappingURL=diff.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-ace/lib/diff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-ace/lib/editorOptions.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-ace/lib/editorOptions.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getAceInstance = exports.debounce = exports.editorEvents = exports.editorOptions = void 0;\nvar editorOptions = [\n    \"minLines\",\n    \"maxLines\",\n    \"readOnly\",\n    \"highlightActiveLine\",\n    \"tabSize\",\n    \"enableBasicAutocompletion\",\n    \"enableLiveAutocompletion\",\n    \"enableSnippets\"\n];\nexports.editorOptions = editorOptions;\nvar editorEvents = [\n    \"onChange\",\n    \"onFocus\",\n    \"onInput\",\n    \"onBlur\",\n    \"onCopy\",\n    \"onPaste\",\n    \"onSelectionChange\",\n    \"onCursorChange\",\n    \"onScroll\",\n    \"handleOptions\",\n    \"updateRef\"\n];\nexports.editorEvents = editorEvents;\nvar getAceInstance = function() {\n    var ace;\n    if (true) {\n        // ace-builds just needs some window object to attach ace to.\n        // During SSR even just an empty object will work.\n        global.window = {};\n        ace = __webpack_require__(/*! ace-builds */ \"(ssr)/./node_modules/ace-builds/src-noconflict/ace.js\");\n        // And it can be discarded immediately afterward to avoid confusing\n        // other libraries that might detect SSR the same way we did.\n        delete global.window;\n    } else {}\n    return ace;\n};\nexports.getAceInstance = getAceInstance;\nvar debounce = function(fn, delay) {\n    var timer = null;\n    // tslint:disable-next-line\n    return function() {\n        var context = this;\n        var args = arguments;\n        clearTimeout(timer);\n        timer = setTimeout(function() {\n            fn.apply(context, args);\n        }, delay);\n    };\n};\nexports.debounce = debounce; //# sourceMappingURL=editorOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYWNlL2xpYi9lZGl0b3JPcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0EsZ0JBQWdCLEdBQUdBLG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ2hHLElBQUlLLGdCQUFnQjtJQUNoQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDREwscUJBQXFCLEdBQUdLO0FBQ3hCLElBQUlELGVBQWU7SUFDZjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDREosb0JBQW9CLEdBQUdJO0FBQ3ZCLElBQUlGLGlCQUFpQjtJQUNqQixJQUFJSTtJQUNKLElBQUksSUFBNkIsRUFBRTtRQUMvQiw2REFBNkQ7UUFDN0Qsa0RBQWtEO1FBQ2xEQyxPQUFPQyxNQUFNLEdBQUcsQ0FBQztRQUNqQkYsTUFBTUcsbUJBQU9BLENBQUMseUVBQVk7UUFDMUIsbUVBQW1FO1FBQ25FLDZEQUE2RDtRQUM3RCxPQUFPRixPQUFPQyxNQUFNO0lBQ3hCLE9BQ0ssRUFPSjtJQUNELE9BQU9GO0FBQ1g7QUFDQU4sc0JBQXNCLEdBQUdFO0FBQ3pCLElBQUlDLFdBQVcsU0FBVVEsRUFBRSxFQUFFQyxLQUFLO0lBQzlCLElBQUlDLFFBQVE7SUFDWiwyQkFBMkI7SUFDM0IsT0FBTztRQUNILElBQUlDLFVBQVUsSUFBSTtRQUNsQixJQUFJQyxPQUFPQztRQUNYQyxhQUFhSjtRQUNiQSxRQUFRSyxXQUFXO1lBQ2ZQLEdBQUdRLEtBQUssQ0FBQ0wsU0FBU0M7UUFDdEIsR0FBR0g7SUFDUDtBQUNKO0FBQ0FaLGdCQUFnQixHQUFHRyxVQUNuQix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1hY2UvbGliL2VkaXRvck9wdGlvbnMuanM/YzBmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QWNlSW5zdGFuY2UgPSBleHBvcnRzLmRlYm91bmNlID0gZXhwb3J0cy5lZGl0b3JFdmVudHMgPSBleHBvcnRzLmVkaXRvck9wdGlvbnMgPSB2b2lkIDA7XG52YXIgZWRpdG9yT3B0aW9ucyA9IFtcbiAgICBcIm1pbkxpbmVzXCIsXG4gICAgXCJtYXhMaW5lc1wiLFxuICAgIFwicmVhZE9ubHlcIixcbiAgICBcImhpZ2hsaWdodEFjdGl2ZUxpbmVcIixcbiAgICBcInRhYlNpemVcIixcbiAgICBcImVuYWJsZUJhc2ljQXV0b2NvbXBsZXRpb25cIixcbiAgICBcImVuYWJsZUxpdmVBdXRvY29tcGxldGlvblwiLFxuICAgIFwiZW5hYmxlU25pcHBldHNcIlxuXTtcbmV4cG9ydHMuZWRpdG9yT3B0aW9ucyA9IGVkaXRvck9wdGlvbnM7XG52YXIgZWRpdG9yRXZlbnRzID0gW1xuICAgIFwib25DaGFuZ2VcIixcbiAgICBcIm9uRm9jdXNcIixcbiAgICBcIm9uSW5wdXRcIixcbiAgICBcIm9uQmx1clwiLFxuICAgIFwib25Db3B5XCIsXG4gICAgXCJvblBhc3RlXCIsXG4gICAgXCJvblNlbGVjdGlvbkNoYW5nZVwiLFxuICAgIFwib25DdXJzb3JDaGFuZ2VcIixcbiAgICBcIm9uU2Nyb2xsXCIsXG4gICAgXCJoYW5kbGVPcHRpb25zXCIsXG4gICAgXCJ1cGRhdGVSZWZcIlxuXTtcbmV4cG9ydHMuZWRpdG9yRXZlbnRzID0gZWRpdG9yRXZlbnRzO1xudmFyIGdldEFjZUluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhY2U7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy8gYWNlLWJ1aWxkcyBqdXN0IG5lZWRzIHNvbWUgd2luZG93IG9iamVjdCB0byBhdHRhY2ggYWNlIHRvLlxuICAgICAgICAvLyBEdXJpbmcgU1NSIGV2ZW4ganVzdCBhbiBlbXB0eSBvYmplY3Qgd2lsbCB3b3JrLlxuICAgICAgICBnbG9iYWwud2luZG93ID0ge307XG4gICAgICAgIGFjZSA9IHJlcXVpcmUoXCJhY2UtYnVpbGRzXCIpO1xuICAgICAgICAvLyBBbmQgaXQgY2FuIGJlIGRpc2NhcmRlZCBpbW1lZGlhdGVseSBhZnRlcndhcmQgdG8gYXZvaWQgY29uZnVzaW5nXG4gICAgICAgIC8vIG90aGVyIGxpYnJhcmllcyB0aGF0IG1pZ2h0IGRldGVjdCBTU1IgdGhlIHNhbWUgd2F5IHdlIGRpZC5cbiAgICAgICAgZGVsZXRlIGdsb2JhbC53aW5kb3c7XG4gICAgfVxuICAgIGVsc2UgaWYgKHdpbmRvdy5hY2UpIHtcbiAgICAgICAgLy8gRmFsbGJhY2sgZm9yIGFjZS5yZXF1aXJlIHdoZW4gdmFuaWxsYSBBQ0UgaXMgaG9zdGVkIG92ZXIgYSBDRE5cbiAgICAgICAgYWNlID0gd2luZG93LmFjZTtcbiAgICAgICAgYWNlLmFjZXF1aXJlID0gd2luZG93LmFjZS5yZXF1aXJlIHx8IHdpbmRvdy5hY2UuYWNlcXVpcmU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhY2UgPSByZXF1aXJlKFwiYWNlLWJ1aWxkc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjZTtcbn07XG5leHBvcnRzLmdldEFjZUluc3RhbmNlID0gZ2V0QWNlSW5zdGFuY2U7XG52YXIgZGVib3VuY2UgPSBmdW5jdGlvbiAoZm4sIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICB9O1xufTtcbmV4cG9ydHMuZGVib3VuY2UgPSBkZWJvdW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVkaXRvck9wdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0QWNlSW5zdGFuY2UiLCJkZWJvdW5jZSIsImVkaXRvckV2ZW50cyIsImVkaXRvck9wdGlvbnMiLCJhY2UiLCJnbG9iYWwiLCJ3aW5kb3ciLCJyZXF1aXJlIiwiYWNlcXVpcmUiLCJmbiIsImRlbGF5IiwidGltZXIiLCJjb250ZXh0IiwiYXJncyIsImFyZ3VtZW50cyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJhcHBseSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-ace/lib/editorOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-ace/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/react-ace/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.diff = exports.split = void 0;\nvar ace_1 = __webpack_require__(/*! ./ace */ \"(ssr)/./node_modules/react-ace/lib/ace.js\");\nvar diff_1 = __webpack_require__(/*! ./diff */ \"(ssr)/./node_modules/react-ace/lib/diff.js\");\nexports.diff = diff_1.default;\nvar split_1 = __webpack_require__(/*! ./split */ \"(ssr)/./node_modules/react-ace/lib/split.js\");\nexports.split = split_1.default;\nexports[\"default\"] = ace_1.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYWNlL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsWUFBWSxHQUFHQSxhQUFhLEdBQUcsS0FBSztBQUNwQyxJQUFJSSxRQUFRQyxtQkFBT0EsQ0FBQyx3REFBTztBQUMzQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQywwREFBUTtBQUM3QkwsWUFBWSxHQUFHTSxPQUFPQyxPQUFPO0FBQzdCLElBQUlDLFVBQVVILG1CQUFPQSxDQUFDLDREQUFTO0FBQy9CTCxhQUFhLEdBQUdRLFFBQVFELE9BQU87QUFDL0JQLGtCQUFlLEdBQUdJLE1BQU1HLE9BQU8sRUFDL0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYWNlL2xpYi9pbmRleC5qcz9iZDc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kaWZmID0gZXhwb3J0cy5zcGxpdCA9IHZvaWQgMDtcbnZhciBhY2VfMSA9IHJlcXVpcmUoXCIuL2FjZVwiKTtcbnZhciBkaWZmXzEgPSByZXF1aXJlKFwiLi9kaWZmXCIpO1xuZXhwb3J0cy5kaWZmID0gZGlmZl8xLmRlZmF1bHQ7XG52YXIgc3BsaXRfMSA9IHJlcXVpcmUoXCIuL3NwbGl0XCIpO1xuZXhwb3J0cy5zcGxpdCA9IHNwbGl0XzEuZGVmYXVsdDtcbmV4cG9ydHMuZGVmYXVsdCA9IGFjZV8xLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkaWZmIiwic3BsaXQiLCJhY2VfMSIsInJlcXVpcmUiLCJkaWZmXzEiLCJkZWZhdWx0Iiwic3BsaXRfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-ace/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-ace/lib/split.js":
/*!*********************************************!*\
  !*** ./node_modules/react-ace/lib/split.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar editorOptions_1 = __webpack_require__(/*! ./editorOptions */ \"(ssr)/./node_modules/react-ace/lib/editorOptions.js\");\nvar ace = (0, editorOptions_1.getAceInstance)();\nvar ace_builds_1 = __webpack_require__(/*! ace-builds */ \"(ssr)/./node_modules/ace-builds/src-noconflict/ace.js\");\nvar ext_split_1 = __webpack_require__(/*! ace-builds/src-noconflict/ext-split */ \"(ssr)/./node_modules/ace-builds/src-noconflict/ext-split.js\");\nvar PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar isEqual = __webpack_require__(/*! lodash.isequal */ \"(ssr)/./node_modules/lodash.isequal/index.js\");\nvar get = __webpack_require__(/*! lodash.get */ \"(ssr)/./node_modules/lodash.get/index.js\");\nvar SplitComponent = /** @class */ function(_super) {\n    __extends(SplitComponent, _super);\n    function SplitComponent(props) {\n        var _this = _super.call(this, props) || this;\n        editorOptions_1.editorEvents.forEach(function(method) {\n            _this[method] = _this[method].bind(_this);\n        });\n        _this.debounce = editorOptions_1.debounce;\n        return _this;\n    }\n    SplitComponent.prototype.isInShadow = function(node) {\n        var parent = node && node.parentNode;\n        while(parent){\n            if (parent.toString() === \"[object ShadowRoot]\") {\n                return true;\n            }\n            parent = parent.parentNode;\n        }\n        return false;\n    };\n    SplitComponent.prototype.componentDidMount = function() {\n        var _this = this;\n        var _a = this.props, className = _a.className, onBeforeLoad = _a.onBeforeLoad, mode = _a.mode, focus = _a.focus, theme = _a.theme, fontSize = _a.fontSize, value = _a.value, defaultValue = _a.defaultValue, cursorStart = _a.cursorStart, showGutter = _a.showGutter, wrapEnabled = _a.wrapEnabled, showPrintMargin = _a.showPrintMargin, _b = _a.scrollMargin, scrollMargin = _b === void 0 ? [\n            0,\n            0,\n            0,\n            0\n        ] : _b, keyboardHandler = _a.keyboardHandler, onLoad = _a.onLoad, commands = _a.commands, annotations = _a.annotations, markers = _a.markers, splits = _a.splits;\n        this.editor = ace.edit(this.refEditor);\n        if (this.isInShadow(this.refEditor)) {\n            this.editor.renderer.attachToShadowRoot();\n        }\n        this.editor.setTheme(\"ace/theme/\".concat(theme));\n        if (onBeforeLoad) {\n            onBeforeLoad(ace);\n        }\n        var editorProps = Object.keys(this.props.editorProps);\n        var split = new ext_split_1.Split(this.editor.container, \"ace/theme/\".concat(theme), splits);\n        this.editor.env.split = split;\n        this.splitEditor = split.getEditor(0);\n        this.split = split;\n        // in a split scenario we don't want a print margin for the entire application\n        this.editor.setShowPrintMargin(false);\n        this.editor.renderer.setShowGutter(false);\n        // get a list of possible options to avoid 'misspelled option errors'\n        var availableOptions = this.splitEditor.$options;\n        if (this.props.debounceChangePeriod) {\n            this.onChange = this.debounce(this.onChange, this.props.debounceChangePeriod);\n        }\n        split.forEach(function(editor, index) {\n            for(var i = 0; i < editorProps.length; i++){\n                editor[editorProps[i]] = _this.props.editorProps[editorProps[i]];\n            }\n            var defaultValueForEditor = get(defaultValue, index);\n            var valueForEditor = get(value, index, \"\");\n            editor.session.setUndoManager(new ace.UndoManager());\n            editor.setTheme(\"ace/theme/\".concat(theme));\n            editor.renderer.setScrollMargin(scrollMargin[0], scrollMargin[1], scrollMargin[2], scrollMargin[3]);\n            editor.getSession().setMode(\"ace/mode/\".concat(mode));\n            editor.setFontSize(fontSize);\n            editor.renderer.setShowGutter(showGutter);\n            editor.getSession().setUseWrapMode(wrapEnabled);\n            editor.setShowPrintMargin(showPrintMargin);\n            editor.on(\"focus\", _this.onFocus);\n            editor.on(\"blur\", _this.onBlur);\n            editor.on(\"input\", _this.onInput);\n            editor.on(\"copy\", _this.onCopy);\n            editor.on(\"paste\", _this.onPaste);\n            editor.on(\"change\", _this.onChange);\n            editor.getSession().selection.on(\"changeSelection\", _this.onSelectionChange);\n            editor.getSession().selection.on(\"changeCursor\", _this.onCursorChange);\n            editor.session.on(\"changeScrollTop\", _this.onScroll);\n            editor.setValue(defaultValueForEditor === undefined ? valueForEditor : defaultValueForEditor, cursorStart);\n            var newAnnotations = get(annotations, index, []);\n            var newMarkers = get(markers, index, []);\n            editor.getSession().setAnnotations(newAnnotations);\n            if (newMarkers && newMarkers.length > 0) {\n                _this.handleMarkers(newMarkers, editor);\n            }\n            for(var i = 0; i < editorOptions_1.editorOptions.length; i++){\n                var option = editorOptions_1.editorOptions[i];\n                if (availableOptions.hasOwnProperty(option)) {\n                    editor.setOption(option, _this.props[option]);\n                } else if (_this.props[option]) {\n                    console.warn(\"ReaceAce: editor option \".concat(option, \" was activated but not found. Did you need to import a related tool or did you possibly mispell the option?\"));\n                }\n            }\n            _this.handleOptions(_this.props, editor);\n            if (Array.isArray(commands)) {\n                commands.forEach(function(command) {\n                    if (typeof command.exec === \"string\") {\n                        editor.commands.bindKey(command.bindKey, command.exec);\n                    } else {\n                        editor.commands.addCommand(command);\n                    }\n                });\n            }\n            if (keyboardHandler) {\n                editor.setKeyboardHandler(\"ace/keyboard/\" + keyboardHandler);\n            }\n        });\n        if (className) {\n            this.refEditor.className += \" \" + className;\n        }\n        if (focus) {\n            this.splitEditor.focus();\n        }\n        var sp = this.editor.env.split;\n        sp.setOrientation(this.props.orientation === \"below\" ? sp.BELOW : sp.BESIDE);\n        sp.resize(true);\n        if (onLoad) {\n            onLoad(sp);\n        }\n    };\n    SplitComponent.prototype.componentDidUpdate = function(prevProps) {\n        var _this = this;\n        var oldProps = prevProps;\n        var nextProps = this.props;\n        var split = this.editor.env.split;\n        if (nextProps.splits !== oldProps.splits) {\n            split.setSplits(nextProps.splits);\n        }\n        if (nextProps.orientation !== oldProps.orientation) {\n            split.setOrientation(nextProps.orientation === \"below\" ? split.BELOW : split.BESIDE);\n        }\n        split.forEach(function(editor, index) {\n            if (nextProps.mode !== oldProps.mode) {\n                editor.getSession().setMode(\"ace/mode/\" + nextProps.mode);\n            }\n            if (nextProps.keyboardHandler !== oldProps.keyboardHandler) {\n                if (nextProps.keyboardHandler) {\n                    editor.setKeyboardHandler(\"ace/keyboard/\" + nextProps.keyboardHandler);\n                } else {\n                    editor.setKeyboardHandler(null);\n                }\n            }\n            if (nextProps.fontSize !== oldProps.fontSize) {\n                editor.setFontSize(nextProps.fontSize);\n            }\n            if (nextProps.wrapEnabled !== oldProps.wrapEnabled) {\n                editor.getSession().setUseWrapMode(nextProps.wrapEnabled);\n            }\n            if (nextProps.showPrintMargin !== oldProps.showPrintMargin) {\n                editor.setShowPrintMargin(nextProps.showPrintMargin);\n            }\n            if (nextProps.showGutter !== oldProps.showGutter) {\n                editor.renderer.setShowGutter(nextProps.showGutter);\n            }\n            for(var i = 0; i < editorOptions_1.editorOptions.length; i++){\n                var option = editorOptions_1.editorOptions[i];\n                if (nextProps[option] !== oldProps[option]) {\n                    editor.setOption(option, nextProps[option]);\n                }\n            }\n            if (!isEqual(nextProps.setOptions, oldProps.setOptions)) {\n                _this.handleOptions(nextProps, editor);\n            }\n            var nextValue = get(nextProps.value, index, \"\");\n            if (editor.getValue() !== nextValue) {\n                // editor.setValue is a synchronous function call, change event is emitted before setValue return.\n                _this.silent = true;\n                var pos = editor.session.selection.toJSON();\n                editor.setValue(nextValue, nextProps.cursorStart);\n                editor.session.selection.fromJSON(pos);\n                _this.silent = false;\n            }\n            var newAnnotations = get(nextProps.annotations, index, []);\n            var oldAnnotations = get(oldProps.annotations, index, []);\n            if (!isEqual(newAnnotations, oldAnnotations)) {\n                editor.getSession().setAnnotations(newAnnotations);\n            }\n            var newMarkers = get(nextProps.markers, index, []);\n            var oldMarkers = get(oldProps.markers, index, []);\n            if (!isEqual(newMarkers, oldMarkers) && Array.isArray(newMarkers)) {\n                _this.handleMarkers(newMarkers, editor);\n            }\n        });\n        if (nextProps.className !== oldProps.className) {\n            var appliedClasses = this.refEditor.className;\n            var appliedClassesArray_1 = appliedClasses.trim().split(\" \");\n            var oldClassesArray = oldProps.className.trim().split(\" \");\n            oldClassesArray.forEach(function(oldClass) {\n                var index = appliedClassesArray_1.indexOf(oldClass);\n                appliedClassesArray_1.splice(index, 1);\n            });\n            this.refEditor.className = \" \" + nextProps.className + \" \" + appliedClassesArray_1.join(\" \");\n        }\n        if (nextProps.theme !== oldProps.theme) {\n            split.setTheme(\"ace/theme/\" + nextProps.theme);\n        }\n        if (nextProps.focus && !oldProps.focus) {\n            this.splitEditor.focus();\n        }\n        if (nextProps.height !== this.props.height || nextProps.width !== this.props.width) {\n            this.editor.resize();\n        }\n    };\n    SplitComponent.prototype.componentWillUnmount = function() {\n        this.editor.destroy();\n        this.editor = null;\n    };\n    SplitComponent.prototype.onChange = function(event) {\n        if (this.props.onChange && !this.silent) {\n            var value_1 = [];\n            this.editor.env.split.forEach(function(editor) {\n                value_1.push(editor.getValue());\n            });\n            this.props.onChange(value_1, event);\n        }\n    };\n    SplitComponent.prototype.onSelectionChange = function(event) {\n        if (this.props.onSelectionChange) {\n            var value_2 = [];\n            this.editor.env.split.forEach(function(editor) {\n                value_2.push(editor.getSelection());\n            });\n            this.props.onSelectionChange(value_2, event);\n        }\n    };\n    SplitComponent.prototype.onCursorChange = function(event) {\n        if (this.props.onCursorChange) {\n            var value_3 = [];\n            this.editor.env.split.forEach(function(editor) {\n                value_3.push(editor.getSelection());\n            });\n            this.props.onCursorChange(value_3, event);\n        }\n    };\n    SplitComponent.prototype.onFocus = function(event) {\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n    SplitComponent.prototype.onInput = function(event) {\n        if (this.props.onInput) {\n            this.props.onInput(event);\n        }\n    };\n    SplitComponent.prototype.onBlur = function(event) {\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    };\n    SplitComponent.prototype.onCopy = function(text) {\n        if (this.props.onCopy) {\n            this.props.onCopy(text);\n        }\n    };\n    SplitComponent.prototype.onPaste = function(text) {\n        if (this.props.onPaste) {\n            this.props.onPaste(text);\n        }\n    };\n    SplitComponent.prototype.onScroll = function() {\n        if (this.props.onScroll) {\n            this.props.onScroll(this.editor);\n        }\n    };\n    SplitComponent.prototype.handleOptions = function(props, editor) {\n        var setOptions = Object.keys(props.setOptions);\n        for(var y = 0; y < setOptions.length; y++){\n            editor.setOption(setOptions[y], props.setOptions[setOptions[y]]);\n        }\n    };\n    SplitComponent.prototype.handleMarkers = function(markers, editor) {\n        // remove foreground markers\n        var currentMarkers = editor.getSession().getMarkers(true);\n        for(var i in currentMarkers){\n            if (currentMarkers.hasOwnProperty(i)) {\n                editor.getSession().removeMarker(currentMarkers[i].id);\n            }\n        }\n        // remove background markers\n        currentMarkers = editor.getSession().getMarkers(false);\n        for(var i in currentMarkers){\n            if (currentMarkers.hasOwnProperty(i)) {\n                editor.getSession().removeMarker(currentMarkers[i].id);\n            }\n        }\n        // add new markers\n        markers.forEach(function(_a) {\n            var startRow = _a.startRow, startCol = _a.startCol, endRow = _a.endRow, endCol = _a.endCol, className = _a.className, type = _a.type, _b = _a.inFront, inFront = _b === void 0 ? false : _b;\n            var range = new ace_builds_1.Range(startRow, startCol, endRow, endCol);\n            editor.getSession().addMarker(range, className, type, inFront);\n        });\n    };\n    SplitComponent.prototype.updateRef = function(item) {\n        this.refEditor = item;\n    };\n    SplitComponent.prototype.render = function() {\n        var _a = this.props, name = _a.name, width = _a.width, height = _a.height, style = _a.style;\n        var divStyle = __assign({\n            width: width,\n            height: height\n        }, style);\n        return React.createElement(\"div\", {\n            ref: this.updateRef,\n            id: name,\n            style: divStyle\n        });\n    };\n    SplitComponent.propTypes = {\n        className: PropTypes.string,\n        debounceChangePeriod: PropTypes.number,\n        defaultValue: PropTypes.arrayOf(PropTypes.string),\n        focus: PropTypes.bool,\n        fontSize: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string\n        ]),\n        height: PropTypes.string,\n        mode: PropTypes.string,\n        name: PropTypes.string,\n        onBlur: PropTypes.func,\n        onChange: PropTypes.func,\n        onCopy: PropTypes.func,\n        onFocus: PropTypes.func,\n        onInput: PropTypes.func,\n        onLoad: PropTypes.func,\n        onPaste: PropTypes.func,\n        onScroll: PropTypes.func,\n        orientation: PropTypes.string,\n        showGutter: PropTypes.bool,\n        splits: PropTypes.number,\n        theme: PropTypes.string,\n        value: PropTypes.arrayOf(PropTypes.string),\n        width: PropTypes.string,\n        onSelectionChange: PropTypes.func,\n        onCursorChange: PropTypes.func,\n        onBeforeLoad: PropTypes.func,\n        minLines: PropTypes.number,\n        maxLines: PropTypes.number,\n        readOnly: PropTypes.bool,\n        highlightActiveLine: PropTypes.bool,\n        tabSize: PropTypes.number,\n        showPrintMargin: PropTypes.bool,\n        cursorStart: PropTypes.number,\n        editorProps: PropTypes.object,\n        setOptions: PropTypes.object,\n        style: PropTypes.object,\n        scrollMargin: PropTypes.array,\n        annotations: PropTypes.array,\n        markers: PropTypes.array,\n        keyboardHandler: PropTypes.string,\n        wrapEnabled: PropTypes.bool,\n        enableBasicAutocompletion: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.array\n        ]),\n        enableLiveAutocompletion: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.array\n        ]),\n        commands: PropTypes.array\n    };\n    SplitComponent.defaultProps = {\n        name: \"ace-editor\",\n        focus: false,\n        orientation: \"beside\",\n        splits: 2,\n        mode: \"\",\n        theme: \"\",\n        height: \"500px\",\n        width: \"500px\",\n        value: [],\n        fontSize: 12,\n        showGutter: true,\n        onChange: null,\n        onPaste: null,\n        onLoad: null,\n        onScroll: null,\n        minLines: null,\n        maxLines: null,\n        readOnly: false,\n        highlightActiveLine: true,\n        showPrintMargin: true,\n        tabSize: 4,\n        cursorStart: 1,\n        editorProps: {},\n        style: {},\n        scrollMargin: [\n            0,\n            0,\n            0,\n            0\n        ],\n        setOptions: {},\n        wrapEnabled: false,\n        enableBasicAutocompletion: false,\n        enableLiveAutocompletion: false\n    };\n    return SplitComponent;\n}(React.Component);\nexports[\"default\"] = SplitComponent; //# sourceMappingURL=split.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-ace/lib/split.js\n");

/***/ })

};
;