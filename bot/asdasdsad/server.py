from flask import Flask, jsonify,request,redirect
from flask_cors import CORS
from controller import CreateConversation
from utility.token_encode_decoder import token_generate,is_valid_token
from dotenv import load_dotenv
import os
load_dotenv()
SECRET_KEY = os.getenv("CASK")
# from db.db import init,get_doc
app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "*"}})  
# init()














########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
#########################  route for production mode (use client storage)    ###########
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################













@app.route('/api/communication', methods=['POST'])
def conversation_response():
    conversation = CreateConversation()
    json_data = request.json
    getObjet = None
    fullChats = None

    if json_data["token"]:
        getObjet = is_valid_token(SECRET_KEY,json_data["token"])
        if getObjet is not None:
            # temp code...next update to add setfunction 
            conversation.memorize  = getObjet["memorize"]
            conversation.chat_property = getObjet["chat_property"]
            conversation.travleConv = getObjet["travleConv"]
            conversation.currentConversition = getObjet["currentConversition"]
    else:
        return redirect("/api/failed")

    message = json_data["message"]
    chatres = None
    def response(res):
        nonlocal chatres
        nonlocal fullChats
        newConv = []
        newConv.append({
                "role":"user",
                "intent":message
            })
        newConv.append({
                "role":"chat_bot",
                "response":res
            })
        listOfChats = []
        try:
           listOfChats =  getObjet["listOfConv"]
           listOfChats = listOfChats+newConv
        except:
            listOfChats = listOfChats+newConv
      
        fullChats = listOfChats
        
        chatres = res
    def send_response():
        if chatres is not None and fullChats is not None:
            # temp code...next update to add getfunction 
            tokenObj = {
                "memorize":conversation.memorize,
                "chat_property":conversation.chat_property,
                "travleConv":conversation.travleConv,
                "currentConversition":conversation.currentConversition,
                "listOfConv":fullChats,
            }
            token = token_generate(SECRET_KEY,tokenObj,expMin=.5)
            data = {
                "token":token,
                "current_res":chatres,
                "full_response":fullChats
            }
            return jsonify(data)
    conversation.onResponse = response
    conversation.injectIntent(message)
    return send_response()













########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
#############################  route for dev mode   ####################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################


























@app.route('/api/communication/dev', methods=['POST'])
def conversation_response_dev():
    conversation = CreateConversation()
    json_data = request.json
    getObjet = None
    fullChats = None
    if json_data["token"]:
        getObjet = is_valid_token(SECRET_KEY,json_data["token"])
        if getObjet is not None:
            # temp code...next update to add setfunction 
            conversation.memorize  = getObjet["memorize"]
            conversation.chat_property = getObjet["chat_property"]
            conversation.travleConv = getObjet["travleConv"]
            conversation.currentConversition = getObjet["currentConversition"]
    message = json_data["message"]
    chatres = None
    def response(res):
        nonlocal chatres
        nonlocal fullChats
        newConv = []
        newConv.append({
                "role":"user",
                "intent":message
            })
        newConv.append({
                "role":"chat_bot",
                "response":res
            })
        listOfChats = []
        try:
           listOfChats =  getObjet["listOfConv"]
           listOfChats = listOfChats+newConv
        except:
            listOfChats = listOfChats+newConv
      
        fullChats = listOfChats
        
        chatres = res
    def send_response():
        if chatres is not None and fullChats is not None:
            # temp code...next update to add getfunction 
            tokenObj = {
                "memorize":conversation.memorize,
                "chat_property":conversation.chat_property,
                "travleConv":conversation.travleConv,
                "currentConversition":conversation.currentConversition,
                "listOfConv":fullChats,
            }
            token = token_generate(SECRET_KEY,tokenObj,expMin=.5)
            data = {
                "token":token,
                "current_res":chatres,
                "full_response":fullChats
            }
            return jsonify(data)
    conversation.onResponse = response
    conversation.injectIntent(message)
    return send_response()










































########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
#########################  route for production mode (use server storage)    ###########
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################














## to do later


# @app.route('/api/communication/db', methods=['POST'])
# def conversation_response_db():
#     conversation = CreateConversation()
#     json_data = request.json
#     getObjet = None
#     fullChats = None
#     id = json_data["id"]
#     result  = get_doc("name",{id:id})
    
#     if result is not None:
#             if result["token"]:
#                 getObjet = is_valid_token(SECRET_KEY,result["token"])
#                 if getObjet is not None:
#                     # temp code...next update to add setfunction 
#                     conversation.memorize  = getObjet["memorize"]
#                     conversation.chat_property = getObjet["chat_property"]
#                     conversation.travleConv = getObjet["travleConv"]
#                     conversation.currentConversition = getObjet["currentConversition"]
#             else:
#                 return redirect("/api/failed")

#             message = json_data["message"]
#             chatres = None
#             def response(res):
#                 nonlocal chatres
#                 nonlocal fullChats
#                 newConv = []
#                 newConv.append({
#                         "role":"user",
#                         "intent":message
#                     })
#                 newConv.append({
#                         "role":"chat_bot",
#                         "response":res
#                     })
#                 listOfChats = []
#                 try:
#                    listOfChats =  getObjet["listOfConv"]
#                    listOfChats = listOfChats+newConv
#                 except:
#                     listOfChats = listOfChats+newConv

#                 fullChats = listOfChats

#                 chatres = res
#             def send_response():
#                 if chatres is not None and fullChats is not None:
#                     # temp code...next update to add getfunction 
#                     tokenObj = {
#                         "memorize":conversation.memorize,
#                         "chat_property":conversation.chat_property,
#                         "travleConv":conversation.travleConv,
#                         "currentConversition":conversation.currentConversition,
#                         "listOfConv":fullChats,
#                     }
#                     token = token_generate(SECRET_KEY,tokenObj,expMin=.5)
#                     data = {
#                         "token":token,
#                         "current_res":chatres,
#                         "full_response":fullChats
#                     }
#                     return jsonify(data)
#             conversation.onResponse = response
#             conversation.injectIntent(message)
#             return send_response()
































@app.route('/api/failed') # auth failed 
def conversitoin_access_failed():
    data = {'message': 'token required'}
    return jsonify(data)









if __name__ == '__main__':
    app.run(debug=False,port=9165)